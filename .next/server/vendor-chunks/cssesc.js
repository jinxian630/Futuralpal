"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cssesc";
exports.ids = ["vendor-chunks/cssesc"];
exports.modules = {

/***/ "(ssr)/./node_modules/cssesc/cssesc.js":
/*!***************************************!*\
  !*** ./node_modules/cssesc/cssesc.js ***!
  \***************************************/
/***/ ((module) => {

eval("/*! https://mths.be/cssesc v3.0.0 by @mathias */\n\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tvar result = {};\n\tfor (var key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n\t}\n\treturn result;\n};\n\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tvar quote = options.quotes == 'double' ? '\"' : '\\'';\n\tvar isIdentifier = options.isIdentifier;\n\n\tvar firstChar = string.charAt(0);\n\tvar output = '';\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar character = string.charAt(counter++);\n\t\tvar codePoint = character.charCodeAt();\n\t\tvar value = void 0;\n\t\t// If it’s not a printable ASCII character…\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It’s a high surrogate, and there is a next character.\n\t\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It’s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (character == '\\\\' || !isIdentifier && (character == '\"' && quote == character || character == '\\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they’re redundant. Note that this is only possible if the escape\n\t// sequence isn’t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It’s not safe to remove the space, so don’t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\ncssesc.version = '3.0.0';\n\nmodule.exports = cssesc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3NzZXNjL2Nzc2VzYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsR0FBRztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQztBQUMvQyw2Q0FBNkM7QUFDN0M7QUFDQSxnREFBZ0QsSUFBSTs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJzb3VyY2VzIjpbIkM6XFxXaW5kb3dzXFxTeXN0ZW0zMlxcaGFja1xcREVWTWF0Y2gtSGFja2F0aG9uLTIwMjVcXG5vZGVfbW9kdWxlc1xcY3NzZXNjXFxjc3Nlc2MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIGh0dHBzOi8vbXRocy5iZS9jc3Nlc2MgdjMuMC4wIGJ5IEBtYXRoaWFzICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBvYmplY3QgPSB7fTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcbnZhciBtZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG5cdGlmICghb3B0aW9ucykge1xuXHRcdHJldHVybiBkZWZhdWx0cztcblx0fVxuXHR2YXIgcmVzdWx0ID0ge307XG5cdGZvciAodmFyIGtleSBpbiBkZWZhdWx0cykge1xuXHRcdC8vIGBpZiAoZGVmYXVsdHMuaGFzT3duUHJvcGVydHkoa2V5KSB7IOKApiB9YCBpcyBub3QgbmVlZGVkIGhlcmUsIHNpbmNlXG5cdFx0Ly8gb25seSByZWNvZ25pemVkIG9wdGlvbiBuYW1lcyBhcmUgdXNlZC5cblx0XHRyZXN1bHRba2V5XSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywga2V5KSA/IG9wdGlvbnNba2V5XSA6IGRlZmF1bHRzW2tleV07XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciByZWdleEFueVNpbmdsZUVzY2FwZSA9IC9bIC0sXFwuXFwvOi1AXFxbLVxcXmBcXHstfl0vO1xudmFyIHJlZ2V4U2luZ2xlRXNjYXBlID0gL1sgLSxcXC5cXC86LUBcXFtcXF1cXF5gXFx7LX5dLztcbnZhciByZWdleEFsd2F5c0VzY2FwZSA9IC9bJ1wiXFxcXF0vO1xudmFyIHJlZ2V4RXhjZXNzaXZlU3BhY2VzID0gLyhefFxcXFwrKT8oXFxcXFtBLUYwLTldezEsNn0pXFx4MjAoPyFbYS1mQS1GMC05XFx4MjBdKS9nO1xuXG4vLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvY3NzLWVzY2FwZXMjY3NzXG52YXIgY3NzZXNjID0gZnVuY3Rpb24gY3NzZXNjKHN0cmluZywgb3B0aW9ucykge1xuXHRvcHRpb25zID0gbWVyZ2Uob3B0aW9ucywgY3NzZXNjLm9wdGlvbnMpO1xuXHRpZiAob3B0aW9ucy5xdW90ZXMgIT0gJ3NpbmdsZScgJiYgb3B0aW9ucy5xdW90ZXMgIT0gJ2RvdWJsZScpIHtcblx0XHRvcHRpb25zLnF1b3RlcyA9ICdzaW5nbGUnO1xuXHR9XG5cdHZhciBxdW90ZSA9IG9wdGlvbnMucXVvdGVzID09ICdkb3VibGUnID8gJ1wiJyA6ICdcXCcnO1xuXHR2YXIgaXNJZGVudGlmaWVyID0gb3B0aW9ucy5pc0lkZW50aWZpZXI7XG5cblx0dmFyIGZpcnN0Q2hhciA9IHN0cmluZy5jaGFyQXQoMCk7XG5cdHZhciBvdXRwdXQgPSAnJztcblx0dmFyIGNvdW50ZXIgPSAwO1xuXHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHR2YXIgY2hhcmFjdGVyID0gc3RyaW5nLmNoYXJBdChjb3VudGVyKyspO1xuXHRcdHZhciBjb2RlUG9pbnQgPSBjaGFyYWN0ZXIuY2hhckNvZGVBdCgpO1xuXHRcdHZhciB2YWx1ZSA9IHZvaWQgMDtcblx0XHQvLyBJZiBpdOKAmXMgbm90IGEgcHJpbnRhYmxlIEFTQ0lJIGNoYXJhY3RlcuKAplxuXHRcdGlmIChjb2RlUG9pbnQgPCAweDIwIHx8IGNvZGVQb2ludCA+IDB4N0UpIHtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHhEODAwICYmIGNvZGVQb2ludCA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBJdOKAmXMgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuXG5cdFx0XHRcdHZhciBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkge1xuXHRcdFx0XHRcdC8vIG5leHQgY2hhcmFjdGVyIGlzIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRjb2RlUG9pbnQgPSAoKGNvZGVQb2ludCAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEl04oCZcyBhbiB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZVxuXHRcdFx0XHRcdC8vIHRoZSBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHZhbHVlID0gJ1xcXFwnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgJyAnO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAob3B0aW9ucy5lc2NhcGVFdmVyeXRoaW5nKSB7XG5cdFx0XHRcdGlmIChyZWdleEFueVNpbmdsZUVzY2FwZS50ZXN0KGNoYXJhY3RlcikpIHtcblx0XHRcdFx0XHR2YWx1ZSA9ICdcXFxcJyArIGNoYXJhY3Rlcjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9ICdcXFxcJyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArICcgJztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgvW1xcdFxcblxcZlxcclxceDBCXS8udGVzdChjaGFyYWN0ZXIpKSB7XG5cdFx0XHRcdHZhbHVlID0gJ1xcXFwnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgJyAnO1xuXHRcdFx0fSBlbHNlIGlmIChjaGFyYWN0ZXIgPT0gJ1xcXFwnIHx8ICFpc0lkZW50aWZpZXIgJiYgKGNoYXJhY3RlciA9PSAnXCInICYmIHF1b3RlID09IGNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT0gJ1xcJycgJiYgcXVvdGUgPT0gY2hhcmFjdGVyKSB8fCBpc0lkZW50aWZpZXIgJiYgcmVnZXhTaW5nbGVFc2NhcGUudGVzdChjaGFyYWN0ZXIpKSB7XG5cdFx0XHRcdHZhbHVlID0gJ1xcXFwnICsgY2hhcmFjdGVyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSBjaGFyYWN0ZXI7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG91dHB1dCArPSB2YWx1ZTtcblx0fVxuXG5cdGlmIChpc0lkZW50aWZpZXIpIHtcblx0XHRpZiAoL14tWy1cXGRdLy50ZXN0KG91dHB1dCkpIHtcblx0XHRcdG91dHB1dCA9ICdcXFxcLScgKyBvdXRwdXQuc2xpY2UoMSk7XG5cdFx0fSBlbHNlIGlmICgvXFxkLy50ZXN0KGZpcnN0Q2hhcikpIHtcblx0XHRcdG91dHB1dCA9ICdcXFxcMycgKyBmaXJzdENoYXIgKyAnICcgKyBvdXRwdXQuc2xpY2UoMSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHNwYWNlcyBhZnRlciBgXFxIRVhgIGVzY2FwZXMgdGhhdCBhcmUgbm90IGZvbGxvd2VkIGJ5IGEgaGV4IGRpZ2l0LFxuXHQvLyBzaW5jZSB0aGV54oCZcmUgcmVkdW5kYW50LiBOb3RlIHRoYXQgdGhpcyBpcyBvbmx5IHBvc3NpYmxlIGlmIHRoZSBlc2NhcGVcblx0Ly8gc2VxdWVuY2UgaXNu4oCZdCBwcmVjZWRlZCBieSBhbiBvZGQgbnVtYmVyIG9mIGJhY2tzbGFzaGVzLlxuXHRvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShyZWdleEV4Y2Vzc2l2ZVNwYWNlcywgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcblx0XHRpZiAoJDEgJiYgJDEubGVuZ3RoICUgMikge1xuXHRcdFx0Ly8gSXTigJlzIG5vdCBzYWZlIHRvIHJlbW92ZSB0aGUgc3BhY2UsIHNvIGRvbuKAmXQuXG5cdFx0XHRyZXR1cm4gJDA7XG5cdFx0fVxuXHRcdC8vIFN0cmlwIHRoZSBzcGFjZS5cblx0XHRyZXR1cm4gKCQxIHx8ICcnKSArICQyO1xuXHR9KTtcblxuXHRpZiAoIWlzSWRlbnRpZmllciAmJiBvcHRpb25zLndyYXApIHtcblx0XHRyZXR1cm4gcXVvdGUgKyBvdXRwdXQgKyBxdW90ZTtcblx0fVxuXHRyZXR1cm4gb3V0cHV0O1xufTtcblxuLy8gRXhwb3NlIGRlZmF1bHQgb3B0aW9ucyAoc28gdGhleSBjYW4gYmUgb3ZlcnJpZGRlbiBnbG9iYWxseSkuXG5jc3Nlc2Mub3B0aW9ucyA9IHtcblx0J2VzY2FwZUV2ZXJ5dGhpbmcnOiBmYWxzZSxcblx0J2lzSWRlbnRpZmllcic6IGZhbHNlLFxuXHQncXVvdGVzJzogJ3NpbmdsZScsXG5cdCd3cmFwJzogZmFsc2Vcbn07XG5cbmNzc2VzYy52ZXJzaW9uID0gJzMuMC4wJztcblxubW9kdWxlLmV4cG9ydHMgPSBjc3Nlc2M7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cssesc/cssesc.js\n");

/***/ })

};
;