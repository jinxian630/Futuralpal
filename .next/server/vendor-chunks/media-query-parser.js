"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/media-query-parser";
exports.ids = ["vendor-chunks/media-query-parser"];
exports.modules = {

/***/ "(ssr)/./node_modules/media-query-parser/dist/media-query-parser.esm.js":
/*!************************************************************************!*\
  !*** ./node_modules/media-query-parser/dist/media-query-parser.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   consumeEscape: () => (/* binding */ consumeEscape),\n/* harmony export */   consumeIdent: () => (/* binding */ consumeIdent),\n/* harmony export */   consumeIdentLike: () => (/* binding */ consumeIdentLike),\n/* harmony export */   consumeIdentUnsafe: () => (/* binding */ consumeIdentUnsafe),\n/* harmony export */   consumeNumber: () => (/* binding */ consumeNumber),\n/* harmony export */   consumeNumeric: () => (/* binding */ consumeNumeric),\n/* harmony export */   consumeString: () => (/* binding */ consumeString),\n/* harmony export */   consumeUrl: () => (/* binding */ consumeUrl),\n/* harmony export */   lexicalAnalysis: () => (/* binding */ lexicalAnalysis),\n/* harmony export */   removeWhitespace: () => (/* binding */ removeWhitespace),\n/* harmony export */   syntacticAnalysis: () => (/* binding */ syntacticAnalysis),\n/* harmony export */   toAST: () => (/* binding */ toAST),\n/* harmony export */   toUnflattenedAST: () => (/* binding */ toUnflattenedAST),\n/* harmony export */   tokenizeMediaCondition: () => (/* binding */ tokenizeMediaCondition),\n/* harmony export */   tokenizeMediaFeature: () => (/* binding */ tokenizeMediaFeature),\n/* harmony export */   tokenizeMediaQuery: () => (/* binding */ tokenizeMediaQuery),\n/* harmony export */   tokenizeRange: () => (/* binding */ tokenizeRange),\n/* harmony export */   wouldStartIdentifier: () => (/* binding */ wouldStartIdentifier)\n/* harmony export */ });\n/*! @license MediaQueryParser - MIT License - Tom Golden (github@tbjgolden.com) */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\n\nvar weirdNewlines = /(\\u000D|\\u000C|\\u000D\\u000A)/g;\nvar nullOrSurrogates = /[\\u0000\\uD800-\\uDFFF]/g;\nvar commentRegex = /(\\/\\*)[\\s\\S]*?(\\*\\/)/g;\nvar lexicalAnalysis = function lexicalAnalysis(str, index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  str = str.replace(weirdNewlines, '\\n').replace(nullOrSurrogates, \"\\uFFFD\");\n  str = str.replace(commentRegex, '');\n  var tokens = [];\n\n  for (; index < str.length; index += 1) {\n    var code = str.charCodeAt(index);\n\n    if (code === 0x0009 || code === 0x0020 || code === 0x000a) {\n      var code_1 = str.charCodeAt(++index);\n\n      while (code_1 === 0x0009 || code_1 === 0x0020 || code_1 === 0x000a) {\n        code_1 = str.charCodeAt(++index);\n      }\n\n      index -= 1;\n      tokens.push({\n        type: '<whitespace-token>'\n      });\n    } else if (code === 0x0022) {\n      var result = consumeString(str, index);\n\n      if (result === null) {\n        return null;\n      }\n\n      var _a = __read(result, 2),\n          lastIndex = _a[0],\n          value = _a[1];\n\n      tokens.push({\n        type: '<string-token>',\n        value: value\n      });\n      index = lastIndex;\n    } else if (code === 0x0023) {\n      if (index + 1 < str.length) {\n        var nextCode = str.charCodeAt(index + 1);\n\n        if (nextCode === 0x005f || nextCode >= 0x0041 && nextCode <= 0x005a || nextCode >= 0x0061 && nextCode <= 0x007a || nextCode >= 0x0080 || nextCode >= 0x0030 && nextCode <= 0x0039 || nextCode === 0x005c && index + 2 < str.length && str.charCodeAt(index + 2) !== 0x000a) {\n          var flag = wouldStartIdentifier(str, index + 1) ? 'id' : 'unrestricted';\n          var result = consumeIdentUnsafe(str, index + 1);\n\n          if (result !== null) {\n            var _b = __read(result, 2),\n                lastIndex = _b[0],\n                value = _b[1];\n\n            tokens.push({\n              type: '<hash-token>',\n              value: value.toLowerCase(),\n              flag: flag\n            });\n            index = lastIndex;\n            continue;\n          }\n        }\n      }\n\n      tokens.push({\n        type: '<delim-token>',\n        value: code\n      });\n    } else if (code === 0x0027) {\n      var result = consumeString(str, index);\n\n      if (result === null) {\n        return null;\n      }\n\n      var _c = __read(result, 2),\n          lastIndex = _c[0],\n          value = _c[1];\n\n      tokens.push({\n        type: '<string-token>',\n        value: value\n      });\n      index = lastIndex;\n    } else if (code === 0x0028) {\n      tokens.push({\n        type: '<(-token>'\n      });\n    } else if (code === 0x0029) {\n      tokens.push({\n        type: '<)-token>'\n      });\n    } else if (code === 0x002b) {\n      var plusNumeric = consumeNumeric(str, index);\n\n      if (plusNumeric === null) {\n        tokens.push({\n          type: '<delim-token>',\n          value: code\n        });\n      } else {\n        var _d = __read(plusNumeric, 2),\n            lastIndex = _d[0],\n            tokenTuple = _d[1];\n\n        if (tokenTuple[0] === '<dimension-token>') {\n          tokens.push({\n            type: '<dimension-token>',\n            value: tokenTuple[1],\n            unit: tokenTuple[2].toLowerCase(),\n            flag: 'number'\n          });\n        } else if (tokenTuple[0] === '<number-token>') {\n          tokens.push({\n            type: tokenTuple[0],\n            value: tokenTuple[1],\n            flag: tokenTuple[2]\n          });\n        } else {\n          tokens.push({\n            type: tokenTuple[0],\n            value: tokenTuple[1],\n            flag: 'number'\n          });\n        }\n\n        index = lastIndex;\n      }\n    } else if (code === 0x002c) {\n      tokens.push({\n        type: '<comma-token>'\n      });\n    } else if (code === 0x002d) {\n      var minusNumeric = consumeNumeric(str, index);\n\n      if (minusNumeric !== null) {\n        var _e = __read(minusNumeric, 2),\n            lastIndex = _e[0],\n            tokenTuple = _e[1];\n\n        if (tokenTuple[0] === '<dimension-token>') {\n          tokens.push({\n            type: '<dimension-token>',\n            value: tokenTuple[1],\n            unit: tokenTuple[2].toLowerCase(),\n            flag: 'number'\n          });\n        } else if (tokenTuple[0] === '<number-token>') {\n          tokens.push({\n            type: tokenTuple[0],\n            value: tokenTuple[1],\n            flag: tokenTuple[2]\n          });\n        } else {\n          tokens.push({\n            type: tokenTuple[0],\n            value: tokenTuple[1],\n            flag: 'number'\n          });\n        }\n\n        index = lastIndex;\n        continue;\n      }\n\n      if (index + 2 < str.length) {\n        var nextCode = str.charCodeAt(index + 1);\n        var nextNextCode = str.charCodeAt(index + 2);\n\n        if (nextCode === 0x002d && nextNextCode === 0x003e) {\n          tokens.push({\n            type: '<CDC-token>'\n          });\n          index += 2;\n          continue;\n        }\n      }\n\n      var result = consumeIdentLike(str, index);\n\n      if (result !== null) {\n        var _f = __read(result, 3),\n            lastIndex = _f[0],\n            value = _f[1],\n            type = _f[2];\n\n        tokens.push({\n          type: type,\n          value: value\n        });\n        index = lastIndex;\n        continue;\n      }\n\n      tokens.push({\n        type: '<delim-token>',\n        value: code\n      });\n    } else if (code === 0x002e) {\n      var minusNumeric = consumeNumeric(str, index);\n\n      if (minusNumeric === null) {\n        tokens.push({\n          type: '<delim-token>',\n          value: code\n        });\n      } else {\n        var _g = __read(minusNumeric, 2),\n            lastIndex = _g[0],\n            tokenTuple = _g[1];\n\n        if (tokenTuple[0] === '<dimension-token>') {\n          tokens.push({\n            type: '<dimension-token>',\n            value: tokenTuple[1],\n            unit: tokenTuple[2].toLowerCase(),\n            flag: 'number'\n          });\n        } else if (tokenTuple[0] === '<number-token>') {\n          tokens.push({\n            type: tokenTuple[0],\n            value: tokenTuple[1],\n            flag: tokenTuple[2]\n          });\n        } else {\n          tokens.push({\n            type: tokenTuple[0],\n            value: tokenTuple[1],\n            flag: 'number'\n          });\n        }\n\n        index = lastIndex;\n        continue;\n      }\n    } else if (code === 0x003a) {\n      tokens.push({\n        type: '<colon-token>'\n      });\n    } else if (code === 0x003b) {\n      tokens.push({\n        type: '<semicolon-token>'\n      });\n    } else if (code === 0x003c) {\n      if (index + 3 < str.length) {\n        var nextCode = str.charCodeAt(index + 1);\n        var nextNextCode = str.charCodeAt(index + 2);\n        var nextNextNextCode = str.charCodeAt(index + 3);\n\n        if (nextCode === 0x0021 && nextNextCode === 0x002d && nextNextNextCode === 0x002d) {\n          tokens.push({\n            type: '<CDO-token>'\n          });\n          index += 3;\n          continue;\n        }\n      }\n\n      tokens.push({\n        type: '<delim-token>',\n        value: code\n      });\n    } else if (code === 0x0040) {\n      var result = consumeIdent(str, index + 1);\n\n      if (result !== null) {\n        var _h = __read(result, 2),\n            lastIndex = _h[0],\n            value = _h[1];\n\n        tokens.push({\n          type: '<at-keyword-token>',\n          value: value.toLowerCase()\n        });\n        index = lastIndex;\n        continue;\n      }\n\n      tokens.push({\n        type: '<delim-token>',\n        value: code\n      });\n    } else if (code === 0x005b) {\n      tokens.push({\n        type: '<[-token>'\n      });\n    } else if (code === 0x005c) {\n      var result = consumeEscape(str, index);\n\n      if (result === null) {\n        return null;\n      }\n\n      var _j = __read(result, 2),\n          lastIndex = _j[0],\n          value = _j[1];\n\n      str = str.slice(0, index) + value + str.slice(lastIndex + 1);\n      index -= 1;\n    } else if (code === 0x005d) {\n      tokens.push({\n        type: '<]-token>'\n      });\n    } else if (code === 0x007b) {\n      tokens.push({\n        type: '<{-token>'\n      });\n    } else if (code === 0x007d) {\n      tokens.push({\n        type: '<}-token>'\n      });\n    } else if (code >= 0x0030 && code <= 0x0039) {\n      var result = consumeNumeric(str, index);\n\n      var _k = __read(result, 2),\n          lastIndex = _k[0],\n          tokenTuple = _k[1];\n\n      if (tokenTuple[0] === '<dimension-token>') {\n        tokens.push({\n          type: '<dimension-token>',\n          value: tokenTuple[1],\n          unit: tokenTuple[2].toLowerCase(),\n          flag: 'number'\n        });\n      } else if (tokenTuple[0] === '<number-token>') {\n        tokens.push({\n          type: tokenTuple[0],\n          value: tokenTuple[1],\n          flag: tokenTuple[2]\n        });\n      } else {\n        tokens.push({\n          type: tokenTuple[0],\n          value: tokenTuple[1],\n          flag: 'number'\n        });\n      }\n\n      index = lastIndex;\n    } else if (code === 0x005f || code >= 0x0041 && code <= 0x005a || code >= 0x0061 && code <= 0x007a || code >= 0x0080) {\n      var result = consumeIdentLike(str, index);\n\n      if (result === null) {\n        return null;\n      }\n\n      var _l = __read(result, 3),\n          lastIndex = _l[0],\n          value = _l[1],\n          type = _l[2];\n\n      tokens.push({\n        type: type,\n        value: value\n      });\n      index = lastIndex;\n    } else {\n      tokens.push({\n        type: '<delim-token>',\n        value: code\n      });\n    }\n  }\n\n  tokens.push({\n    type: '<EOF-token>'\n  });\n  return tokens;\n};\nvar consumeString = function consumeString(str, index) {\n  if (str.length <= index + 1) return null;\n  var firstCode = str.charCodeAt(index);\n  var charCodes = [];\n\n  for (var i = index + 1; i < str.length; i += 1) {\n    var code = str.charCodeAt(i);\n\n    if (code === firstCode) {\n      return [i, String.fromCharCode.apply(null, charCodes)];\n    } else if (code === 0x005c) {\n      var result = consumeEscape(str, i);\n      if (result === null) return null;\n\n      var _a = __read(result, 2),\n          lastIndex = _a[0],\n          charCode = _a[1];\n\n      charCodes.push(charCode);\n      i = lastIndex;\n    } else if (code === 0x000a) {\n      return null;\n    } else {\n      charCodes.push(code);\n    }\n  }\n\n  return null;\n};\nvar wouldStartIdentifier = function wouldStartIdentifier(str, index) {\n  if (str.length <= index) return false;\n  var code = str.charCodeAt(index);\n\n  if (code === 0x002d) {\n    if (str.length <= index + 1) return false;\n    var nextCode = str.charCodeAt(index + 1);\n\n    if (nextCode === 0x002d || nextCode === 0x005f || nextCode >= 0x0041 && nextCode <= 0x005a || nextCode >= 0x0061 && nextCode <= 0x007a || nextCode >= 0x0080) {\n      return true;\n    } else if (nextCode === 0x005c) {\n      if (str.length <= index + 2) return false;\n      var nextNextCode = str.charCodeAt(index + 2);\n      return nextNextCode !== 0x000a;\n    } else {\n      return false;\n    }\n  } else if (code === 0x005f || code >= 0x0041 && code <= 0x005a || code >= 0x0061 && code <= 0x007a || code >= 0x0080) {\n    return true;\n  } else if (code === 0x005c) {\n    if (str.length <= index + 1) return false;\n    var nextCode = str.charCodeAt(index + 1);\n    return nextCode !== 0x000a;\n  } else {\n    return false;\n  }\n};\nvar consumeEscape = function consumeEscape(str, index) {\n  if (str.length <= index + 1) return null;\n  if (str.charCodeAt(index) !== 0x005c) return null;\n  var code = str.charCodeAt(index + 1);\n\n  if (code === 0x000a) {\n    return null;\n  } else if (code >= 0x0030 && code <= 0x0039 || code >= 0x0041 && code <= 0x0046 || code >= 0x0061 && code <= 0x0066) {\n    var hexCharCodes = [code];\n    var min = Math.min(index + 7, str.length);\n    var i = index + 2;\n\n    for (; i < min; i += 1) {\n      var code_2 = str.charCodeAt(i);\n\n      if (code_2 >= 0x0030 && code_2 <= 0x0039 || code_2 >= 0x0041 && code_2 <= 0x0046 || code_2 >= 0x0061 && code_2 <= 0x0066) {\n        hexCharCodes.push(code_2);\n      } else {\n        break;\n      }\n    }\n\n    if (i < str.length) {\n      var code_3 = str.charCodeAt(i);\n\n      if (code_3 === 0x0009 || code_3 === 0x0020 || code_3 === 0x000a) {\n        i += 1;\n      }\n    }\n\n    return [i - 1, parseInt(String.fromCharCode.apply(null, hexCharCodes), 16)];\n  } else {\n    return [index + 1, code];\n  }\n};\nvar consumeNumeric = function consumeNumeric(str, index) {\n  var numberResult = consumeNumber(str, index);\n  if (numberResult === null) return null;\n\n  var _a = __read(numberResult, 3),\n      numberEndIndex = _a[0],\n      numberValue = _a[1],\n      numberFlag = _a[2];\n\n  var identResult = consumeIdent(str, numberEndIndex + 1);\n\n  if (identResult !== null) {\n    var _b = __read(identResult, 2),\n        identEndIndex = _b[0],\n        identValue = _b[1];\n\n    return [identEndIndex, ['<dimension-token>', numberValue, identValue]];\n  }\n\n  if (numberEndIndex + 1 < str.length && str.charCodeAt(numberEndIndex + 1) === 0x0025) {\n    return [numberEndIndex + 1, ['<percentage-token>', numberValue]];\n  }\n\n  return [numberEndIndex, ['<number-token>', numberValue, numberFlag]];\n};\nvar consumeNumber = function consumeNumber(str, index) {\n  if (str.length <= index) return null;\n  var flag = 'integer';\n  var numberChars = [];\n  var firstCode = str.charCodeAt(index);\n\n  if (firstCode === 0x002b || firstCode === 0x002d) {\n    index += 1;\n    if (firstCode === 0x002d) numberChars.push(0x002d);\n  }\n\n  while (index < str.length) {\n    var code = str.charCodeAt(index);\n\n    if (code >= 0x0030 && code <= 0x0039) {\n      numberChars.push(code);\n      index += 1;\n    } else {\n      break;\n    }\n  }\n\n  if (index + 1 < str.length) {\n    var nextCode = str.charCodeAt(index);\n    var nextNextCode = str.charCodeAt(index + 1);\n\n    if (nextCode === 0x002e && nextNextCode >= 0x0030 && nextNextCode <= 0x0039) {\n      numberChars.push(nextCode, nextNextCode);\n      flag = 'number';\n      index += 2;\n\n      while (index < str.length) {\n        var code = str.charCodeAt(index);\n\n        if (code >= 0x0030 && code <= 0x0039) {\n          numberChars.push(code);\n          index += 1;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  if (index + 1 < str.length) {\n    var nextCode = str.charCodeAt(index);\n    var nextNextCode = str.charCodeAt(index + 1);\n    var nextNextNextCode = str.charCodeAt(index + 2);\n\n    if (nextCode === 0x0045 || nextCode === 0x0065) {\n      var nextNextIsDigit = nextNextCode >= 0x0030 && nextNextCode <= 0x0039;\n\n      if (nextNextIsDigit || (nextNextCode === 0x002b || nextNextCode === 0x002d) && nextNextNextCode >= 0x0030 && nextNextNextCode <= 0x0039) {\n        flag = 'number';\n\n        if (nextNextIsDigit) {\n          numberChars.push(0x0045, nextNextCode);\n          index += 2;\n        } else if (nextNextCode === 0x002d) {\n          numberChars.push(0x0045, 0x002d, nextNextNextCode);\n          index += 3;\n        } else {\n          numberChars.push(0x0045, nextNextNextCode);\n          index += 3;\n        }\n\n        while (index < str.length) {\n          var code = str.charCodeAt(index);\n\n          if (code >= 0x0030 && code <= 0x0039) {\n            numberChars.push(code);\n            index += 1;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  var numberString = String.fromCharCode.apply(null, numberChars);\n  var value = flag === 'number' ? parseFloat(numberString) : parseInt(numberString);\n  if (value === -0) value = 0;\n  return Number.isNaN(value) ? null : [index - 1, value, flag];\n};\nvar consumeIdentUnsafe = function consumeIdentUnsafe(str, index) {\n  if (str.length <= index) {\n    return null;\n  }\n\n  var identChars = [];\n\n  for (var code = str.charCodeAt(index); index < str.length; code = str.charCodeAt(++index)) {\n    if (code === 0x002d || code === 0x005f || code >= 0x0041 && code <= 0x005a || code >= 0x0061 && code <= 0x007a || code >= 0x0080 || code >= 0x0030 && code <= 0x0039) {\n      identChars.push(code);\n      continue;\n    } else {\n      var result = consumeEscape(str, index);\n\n      if (result !== null) {\n        var _a = __read(result, 2),\n            lastIndex = _a[0],\n            code_4 = _a[1];\n\n        identChars.push(code_4);\n        index = lastIndex;\n        continue;\n      }\n    }\n\n    break;\n  }\n\n  return index === 0 ? null : [index - 1, String.fromCharCode.apply(null, identChars)];\n};\nvar consumeIdent = function consumeIdent(str, index) {\n  if (str.length <= index || !wouldStartIdentifier(str, index)) {\n    return null;\n  }\n\n  var identChars = [];\n\n  for (var code = str.charCodeAt(index); index < str.length; code = str.charCodeAt(++index)) {\n    if (code === 0x002d || code === 0x005f || code >= 0x0041 && code <= 0x005a || code >= 0x0061 && code <= 0x007a || code >= 0x0080 || code >= 0x0030 && code <= 0x0039) {\n      identChars.push(code);\n      continue;\n    } else {\n      var result = consumeEscape(str, index);\n\n      if (result !== null) {\n        var _a = __read(result, 2),\n            lastIndex = _a[0],\n            code_5 = _a[1];\n\n        identChars.push(code_5);\n        index = lastIndex;\n        continue;\n      }\n    }\n\n    break;\n  }\n\n  return [index - 1, String.fromCharCode.apply(null, identChars)];\n};\nvar consumeUrl = function consumeUrl(str, index) {\n  var code = str.charCodeAt(index);\n\n  while (code === 0x0009 || code === 0x0020 || code === 0x000a) {\n    code = str.charCodeAt(++index);\n  }\n\n  var urlChars = [];\n  var hasFinishedWord = false;\n\n  while (index < str.length) {\n    if (code === 0x0029) {\n      return [index, String.fromCharCode.apply(null, urlChars)];\n    } else if (code === 0x0022 || code === 0x0027 || code === 0x0028) {\n      return null;\n    } else if (code === 0x0009 || code === 0x0020 || code === 0x000a) {\n      if (!hasFinishedWord && urlChars.length !== 0) hasFinishedWord = true;\n    } else if (code === 0x005c) {\n      var result = consumeEscape(str, index);\n      if (result === null || hasFinishedWord) return null;\n\n      var _a = __read(result, 2),\n          lastIndex = _a[0],\n          value = _a[1];\n\n      urlChars.push(value);\n      index = lastIndex;\n    } else {\n      if (hasFinishedWord) return null;\n      urlChars.push(code);\n    }\n\n    code = str.charCodeAt(++index);\n  }\n\n  return null;\n};\nvar consumeIdentLike = function consumeIdentLike(str, index) {\n  var result = consumeIdent(str, index);\n  if (result === null) return null;\n\n  var _a = __read(result, 2),\n      lastIndex = _a[0],\n      value = _a[1];\n\n  if (value.toLowerCase() === 'url') {\n    if (str.length > lastIndex + 1) {\n      var nextCode = str.charCodeAt(lastIndex + 1);\n\n      if (nextCode === 0x0028) {\n        for (var offset = 2; lastIndex + offset < str.length; offset += 1) {\n          var nextNextCode = str.charCodeAt(lastIndex + offset);\n\n          if (nextNextCode === 0x0022 || nextNextCode === 0x0027) {\n            return [lastIndex + 1, value.toLowerCase(), '<function-token>'];\n          } else if (nextNextCode !== 0x0009 && nextNextCode !== 0x0020 && nextNextCode !== 0x000a) {\n            var result_1 = consumeUrl(str, lastIndex + offset);\n            if (result_1 === null) return null;\n\n            var _b = __read(result_1, 2),\n                lastUrlIndex = _b[0],\n                value_1 = _b[1];\n\n            return [lastUrlIndex, value_1, '<url-token>'];\n          }\n        }\n\n        return [lastIndex + 1, value.toLowerCase(), '<function-token>'];\n      }\n    }\n  } else if (str.length > lastIndex + 1) {\n    var nextCode = str.charCodeAt(lastIndex + 1);\n\n    if (nextCode === 0x0028) {\n      return [lastIndex + 1, value.toLowerCase(), '<function-token>'];\n    }\n  }\n\n  return [lastIndex, value.toLowerCase(), '<ident-token>'];\n};\n\nvar simplifyAST = function simplifyAST(ast) {\n  for (var i = ast.length - 1; i >= 0; i--) {\n    ast[i] = simplifyMediaQuery(ast[i]);\n  }\n\n  return ast;\n};\n\nvar simplifyMediaQuery = function simplifyMediaQuery(mediaQuery) {\n  if (mediaQuery.mediaCondition === null) return mediaQuery;\n  var mediaCondition = simplifyMediaCondition(mediaQuery.mediaCondition);\n\n  if (mediaCondition.operator === null && mediaCondition.children.length === 1 && 'children' in mediaCondition.children[0]) {\n    mediaCondition = mediaCondition.children[0];\n  }\n\n  return {\n    mediaPrefix: mediaQuery.mediaPrefix,\n    mediaType: mediaQuery.mediaType,\n    mediaCondition: mediaCondition\n  };\n};\n\nvar simplifyMediaCondition = function simplifyMediaCondition(mediaCondition) {\n  for (var i = mediaCondition.children.length - 1; i >= 0; i--) {\n    var unsimplifiedChild = mediaCondition.children[i];\n\n    if (!('context' in unsimplifiedChild)) {\n      var child = simplifyMediaCondition(unsimplifiedChild);\n\n      if (child.operator === null && child.children.length === 1) {\n        mediaCondition.children[i] = child.children[0];\n      } else if (child.operator === mediaCondition.operator && (child.operator === 'and' || child.operator === 'or')) {\n        var spliceArgs = [i, 1];\n\n        for (var i_1 = 0; i_1 < child.children.length; i_1++) {\n          spliceArgs.push(child.children[i_1]);\n        }\n\n        mediaCondition.children.splice.apply(mediaCondition.children, spliceArgs);\n      }\n    }\n  }\n\n  return mediaCondition;\n};\n\nvar createError = function createError(message, err) {\n  if (err instanceof Error) {\n    return new Error(\"\".concat(err.message.trim(), \"\\n\").concat(message.trim()));\n  } else {\n    return new Error(message.trim());\n  }\n};\n\nvar toAST = function toAST(str) {\n  return simplifyAST(toUnflattenedAST(str));\n};\nvar toUnflattenedAST = function toUnflattenedAST(str) {\n  var tokenList = lexicalAnalysis(str.trim());\n\n  if (tokenList === null) {\n    throw createError('Failed tokenizing');\n  }\n\n  var startIndex = 0;\n  var endIndex = tokenList.length - 1;\n\n  if (tokenList[0].type === '<at-keyword-token>' && tokenList[0].value === 'media') {\n    if (tokenList[1].type !== '<whitespace-token>') {\n      throw createError('Expected whitespace after media');\n    }\n\n    startIndex = 2;\n\n    for (var i = 2; i < tokenList.length - 1; i++) {\n      var token = tokenList[i];\n\n      if (token.type === '<{-token>') {\n        endIndex = i;\n        break;\n      } else if (token.type === '<semicolon-token>') {\n        throw createError(\"Expected '{' in media query but found ';'\");\n      }\n    }\n  }\n\n  tokenList = tokenList.slice(startIndex, endIndex);\n  return syntacticAnalysis(tokenList);\n};\nvar removeWhitespace = function removeWhitespace(tokenList) {\n  var newTokenList = [];\n  var before = false;\n\n  for (var i = 0; i < tokenList.length; i++) {\n    if (tokenList[i].type === '<whitespace-token>') {\n      before = true;\n\n      if (newTokenList.length > 0) {\n        newTokenList[newTokenList.length - 1].wsAfter = true;\n      }\n    } else {\n      newTokenList.push(__assign(__assign({}, tokenList[i]), {\n        wsBefore: before,\n        wsAfter: false\n      }));\n      before = false;\n    }\n  }\n\n  return newTokenList;\n};\nvar syntacticAnalysis = function syntacticAnalysis(tokenList) {\n  var e_1, _a;\n\n  var mediaQueryList = [[]];\n\n  for (var i = 0; i < tokenList.length; i++) {\n    var token = tokenList[i];\n\n    if (token.type === '<comma-token>') {\n      mediaQueryList.push([]);\n    } else {\n      mediaQueryList[mediaQueryList.length - 1].push(token);\n    }\n  }\n\n  var mediaQueries = mediaQueryList.map(removeWhitespace);\n\n  if (mediaQueries.length === 1 && mediaQueries[0].length === 0) {\n    return [{\n      mediaCondition: null,\n      mediaPrefix: null,\n      mediaType: 'all'\n    }];\n  } else {\n    var mediaQueryTokens = mediaQueries.map(function (mediaQueryTokens) {\n      if (mediaQueryTokens.length === 0) {\n        return null;\n      } else {\n        return tokenizeMediaQuery(mediaQueryTokens);\n      }\n    });\n    var nonNullMediaQueryTokens = [];\n\n    try {\n      for (var mediaQueryTokens_1 = __values(mediaQueryTokens), mediaQueryTokens_1_1 = mediaQueryTokens_1.next(); !mediaQueryTokens_1_1.done; mediaQueryTokens_1_1 = mediaQueryTokens_1.next()) {\n        var mediaQueryToken = mediaQueryTokens_1_1.value;\n\n        if (mediaQueryToken !== null) {\n          nonNullMediaQueryTokens.push(mediaQueryToken);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (mediaQueryTokens_1_1 && !mediaQueryTokens_1_1.done && (_a = mediaQueryTokens_1[\"return\"])) _a.call(mediaQueryTokens_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (nonNullMediaQueryTokens.length === 0) {\n      throw createError('No valid media queries');\n    }\n\n    return nonNullMediaQueryTokens;\n  }\n};\nvar tokenizeMediaQuery = function tokenizeMediaQuery(tokens) {\n  var firstToken = tokens[0];\n\n  if (firstToken.type === '<(-token>') {\n    try {\n      return {\n        mediaPrefix: null,\n        mediaType: 'all',\n        mediaCondition: tokenizeMediaCondition(tokens, true)\n      };\n    } catch (err) {\n      throw createError(\"Expected media condition after '('\", err);\n    }\n  } else if (firstToken.type === '<ident-token>') {\n    var mediaPrefix = null;\n    var mediaType = void 0;\n    var value = firstToken.value;\n\n    if (value === 'only' || value === 'not') {\n      mediaPrefix = value;\n    }\n\n    var firstIndex = mediaPrefix === null ? 0 : 1;\n\n    if (tokens.length <= firstIndex) {\n      throw createError(\"Expected extra token in media query\");\n    }\n\n    var firstNonUnaryToken = tokens[firstIndex];\n\n    if (firstNonUnaryToken.type === '<ident-token>') {\n      var value_1 = firstNonUnaryToken.value;\n\n      if (value_1 === 'all') {\n        mediaType = 'all';\n      } else if (value_1 === 'print' || value_1 === 'screen') {\n        mediaType = value_1;\n      } else if (value_1 === 'tty' || value_1 === 'tv' || value_1 === 'projection' || value_1 === 'handheld' || value_1 === 'braille' || value_1 === 'embossed' || value_1 === 'aural' || value_1 === 'speech') {\n        mediaPrefix = mediaPrefix === 'not' ? null : 'not';\n        mediaType = 'all';\n      } else {\n        throw createError(\"Unknown ident '\".concat(value_1, \"' in media query\"));\n      }\n    } else if (mediaPrefix === 'not' && firstNonUnaryToken.type === '<(-token>') {\n      var tokensWithParens = [{\n        type: '<(-token>',\n        wsBefore: false,\n        wsAfter: false\n      }];\n      tokensWithParens.push.apply(tokensWithParens, tokens);\n      tokensWithParens.push({\n        type: '<)-token>',\n        wsBefore: false,\n        wsAfter: false\n      });\n\n      try {\n        return {\n          mediaPrefix: null,\n          mediaType: 'all',\n          mediaCondition: tokenizeMediaCondition(tokensWithParens, true)\n        };\n      } catch (err) {\n        throw createError(\"Expected media condition after '('\", err);\n      }\n    } else {\n      throw createError('Invalid media query');\n    }\n\n    if (firstIndex + 1 === tokens.length) {\n      return {\n        mediaPrefix: mediaPrefix,\n        mediaType: mediaType,\n        mediaCondition: null\n      };\n    } else if (firstIndex + 4 < tokens.length) {\n      var secondNonUnaryToken = tokens[firstIndex + 1];\n\n      if (secondNonUnaryToken.type === '<ident-token>' && secondNonUnaryToken.value === 'and') {\n        try {\n          return {\n            mediaPrefix: mediaPrefix,\n            mediaType: mediaType,\n            mediaCondition: tokenizeMediaCondition(tokens.slice(firstIndex + 2), false)\n          };\n        } catch (err) {\n          throw createError(\"Expected media condition after 'and'\", err);\n        }\n      } else {\n        throw createError(\"Expected 'and' after media prefix\");\n      }\n    } else {\n      throw createError('Expected media condition after media prefix');\n    }\n  } else {\n    throw createError('Expected media condition or media prefix');\n  }\n};\nvar tokenizeMediaCondition = function tokenizeMediaCondition(tokens, mayContainOr, previousOperator) {\n  if (previousOperator === void 0) {\n    previousOperator = null;\n  }\n\n  if (tokens.length < 3 || tokens[0].type !== '<(-token>' || tokens[tokens.length - 1].type !== '<)-token>') {\n    throw new Error('Invalid media condition');\n  }\n\n  var endIndexOfFirstFeature = tokens.length - 1;\n  var maxDepth = 0;\n  var count = 0;\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (token.type === '<(-token>') {\n      count += 1;\n      maxDepth = Math.max(maxDepth, count);\n    } else if (token.type === '<)-token>') {\n      count -= 1;\n    }\n\n    if (count === 0) {\n      endIndexOfFirstFeature = i;\n      break;\n    }\n  }\n\n  if (count !== 0) {\n    throw new Error('Mismatched parens\\nInvalid media condition');\n  }\n\n  var child;\n  var featureTokens = tokens.slice(0, endIndexOfFirstFeature + 1);\n\n  if (maxDepth === 1) {\n    child = tokenizeMediaFeature(featureTokens);\n  } else {\n    if (featureTokens[1].type === '<ident-token>' && featureTokens[1].value === 'not') {\n      child = tokenizeMediaCondition(featureTokens.slice(2, -1), true, 'not');\n    } else {\n      child = tokenizeMediaCondition(featureTokens.slice(1, -1), true);\n    }\n  }\n\n  if (endIndexOfFirstFeature === tokens.length - 1) {\n    return {\n      operator: previousOperator,\n      children: [child]\n    };\n  } else {\n    var nextToken = tokens[endIndexOfFirstFeature + 1];\n\n    if (nextToken.type !== '<ident-token>') {\n      throw new Error('Invalid operator\\nInvalid media condition');\n    } else if (previousOperator !== null && previousOperator !== nextToken.value) {\n      throw new Error(\"'\".concat(nextToken.value, \"' and '\").concat(previousOperator, \"' must not be at same level\\nInvalid media condition\"));\n    } else if (nextToken.value === 'or' && !mayContainOr) {\n      throw new Error(\"Cannot use 'or' at top level of a media query\\nInvalid media condition\");\n    } else if (nextToken.value !== 'and' && nextToken.value !== 'or') {\n      throw new Error(\"Invalid operator: '\".concat(nextToken.value, \"'\\nInvalid media condition\"));\n    }\n\n    var siblings = tokenizeMediaCondition(tokens.slice(endIndexOfFirstFeature + 2), mayContainOr, nextToken.value);\n    return {\n      operator: nextToken.value,\n      children: [child].concat(siblings.children)\n    };\n  }\n};\nvar tokenizeMediaFeature = function tokenizeMediaFeature(rawTokens) {\n  if (rawTokens.length < 3 || rawTokens[0].type !== '<(-token>' || rawTokens[rawTokens.length - 1].type !== '<)-token>') {\n    throw new Error('Invalid media feature');\n  }\n\n  var tokens = [rawTokens[0]];\n\n  for (var i = 1; i < rawTokens.length; i++) {\n    if (i < rawTokens.length - 2) {\n      var a = rawTokens[i];\n      var b = rawTokens[i + 1];\n      var c = rawTokens[i + 2];\n\n      if (a.type === '<number-token>' && a.value > 0 && b.type === '<delim-token>' && b.value === 0x002f && c.type === '<number-token>' && c.value > 0) {\n        tokens.push({\n          type: '<ratio-token>',\n          numerator: a.value,\n          denominator: c.value,\n          wsBefore: a.wsBefore,\n          wsAfter: c.wsAfter\n        });\n        i += 2;\n        continue;\n      }\n    }\n\n    tokens.push(rawTokens[i]);\n  }\n\n  var nextToken = tokens[1];\n\n  if (nextToken.type === '<ident-token>' && tokens.length === 3) {\n    return {\n      context: 'boolean',\n      feature: nextToken.value\n    };\n  } else if (tokens.length === 5 && tokens[1].type === '<ident-token>' && tokens[2].type === '<colon-token>') {\n    var valueToken = tokens[3];\n\n    if (valueToken.type === '<number-token>' || valueToken.type === '<dimension-token>' || valueToken.type === '<ratio-token>' || valueToken.type === '<ident-token>') {\n      var feature = tokens[1].value;\n      var prefix = null;\n      var slice = feature.slice(0, 4);\n\n      if (slice === 'min-') {\n        prefix = 'min';\n        feature = feature.slice(4);\n      } else if (slice === 'max-') {\n        prefix = 'max';\n        feature = feature.slice(4);\n      }\n\n      valueToken.wsBefore;\n          valueToken.wsAfter;\n          var value = __rest(valueToken, [\"wsBefore\", \"wsAfter\"]);\n\n      return {\n        context: 'value',\n        prefix: prefix,\n        feature: feature,\n        value: value\n      };\n    }\n  } else if (tokens.length >= 5) {\n    try {\n      var range = tokenizeRange(tokens);\n      return {\n        context: 'range',\n        feature: range.featureName,\n        range: range\n      };\n    } catch (err) {\n      throw createError('Invalid media feature', err);\n    }\n  }\n\n  throw new Error('Invalid media feature');\n};\nvar tokenizeRange = function tokenizeRange(tokens) {\n  var _a, _b, _c, _d;\n\n  if (tokens.length < 5 || tokens[0].type !== '<(-token>' || tokens[tokens.length - 1].type !== '<)-token>') {\n    throw new Error('Invalid range');\n  }\n\n  var range = {\n    leftToken: null,\n    leftOp: null,\n    featureName: '',\n    rightOp: null,\n    rightToken: null\n  };\n  var hasLeft = tokens[1].type === '<number-token>' || tokens[1].type === '<dimension-token>' || tokens[1].type === '<ratio-token>' || tokens[1].type === '<ident-token>' && tokens[1].value === 'infinite';\n\n  if (tokens[2].type === '<delim-token>') {\n    if (tokens[2].value === 0x003c) {\n      if (tokens[3].type === '<delim-token>' && tokens[3].value === 0x003d && !tokens[3].wsBefore) {\n        range[hasLeft ? 'leftOp' : 'rightOp'] = '<=';\n      } else {\n        range[hasLeft ? 'leftOp' : 'rightOp'] = '<';\n      }\n    } else if (tokens[2].value === 0x003e) {\n      if (tokens[3].type === '<delim-token>' && tokens[3].value === 0x003d && !tokens[3].wsBefore) {\n        range[hasLeft ? 'leftOp' : 'rightOp'] = '>=';\n      } else {\n        range[hasLeft ? 'leftOp' : 'rightOp'] = '>';\n      }\n    } else if (tokens[2].value === 0x003d) {\n      range[hasLeft ? 'leftOp' : 'rightOp'] = '=';\n    } else {\n      throw new Error('Invalid range');\n    }\n\n    if (hasLeft) {\n      range.leftToken = tokens[1];\n    } else if (tokens[1].type === '<ident-token>') {\n      range.featureName = tokens[1].value;\n    } else {\n      throw new Error('Invalid range');\n    }\n\n    var tokenIndexAfterFirstOp = 2 + ((_b = (_a = range[hasLeft ? 'leftOp' : 'rightOp']) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n    var tokenAfterFirstOp = tokens[tokenIndexAfterFirstOp];\n\n    if (hasLeft) {\n      if (tokenAfterFirstOp.type === '<ident-token>') {\n        range.featureName = tokenAfterFirstOp.value;\n\n        if (tokens.length >= 7) {\n          var secondOpToken = tokens[tokenIndexAfterFirstOp + 1];\n          var followingToken = tokens[tokenIndexAfterFirstOp + 2];\n\n          if (secondOpToken.type === '<delim-token>') {\n            var charCode = secondOpToken.value;\n\n            if (charCode === 0x003c) {\n              if (followingToken.type === '<delim-token>' && followingToken.value === 0x003d && !followingToken.wsBefore) {\n                range.rightOp = '<=';\n              } else {\n                range.rightOp = '<';\n              }\n            } else if (charCode === 0x003e) {\n              if (followingToken.type === '<delim-token>' && followingToken.value === 0x003d && !followingToken.wsBefore) {\n                range.rightOp = '>=';\n              } else {\n                range.rightOp = '>';\n              }\n            } else {\n              throw new Error('Invalid range');\n            }\n\n            var tokenAfterSecondOp = tokens[tokenIndexAfterFirstOp + 1 + ((_d = (_c = range.rightOp) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0)];\n            range.rightToken = tokenAfterSecondOp;\n          } else {\n            throw new Error('Invalid range');\n          }\n        } else if (tokenIndexAfterFirstOp + 2 !== tokens.length) {\n          throw new Error('Invalid range');\n        }\n      } else {\n        throw new Error('Invalid range');\n      }\n    } else {\n      range.rightToken = tokenAfterFirstOp;\n    }\n\n    var validRange = null;\n    var lt = range.leftToken,\n        leftOp = range.leftOp,\n        featureName = range.featureName,\n        rightOp = range.rightOp,\n        rt = range.rightToken;\n    var leftToken = null;\n\n    if (lt !== null) {\n      if (lt.type === '<ident-token>') {\n        var type = lt.type,\n            value = lt.value;\n\n        if (value === 'infinite') {\n          leftToken = {\n            type: type,\n            value: value\n          };\n        }\n      } else if (lt.type === '<number-token>' || lt.type === '<dimension-token>' || lt.type === '<ratio-token>') {\n        lt.wsBefore;\n            lt.wsAfter;\n            var ltNoWS = __rest(lt, [\"wsBefore\", \"wsAfter\"]);\n\n        leftToken = ltNoWS;\n      }\n    }\n\n    var rightToken = null;\n\n    if (rt !== null) {\n      if (rt.type === '<ident-token>') {\n        var type = rt.type,\n            value = rt.value;\n\n        if (value === 'infinite') {\n          rightToken = {\n            type: type,\n            value: value\n          };\n        }\n      } else if (rt.type === '<number-token>' || rt.type === '<dimension-token>' || rt.type === '<ratio-token>') {\n        rt.wsBefore;\n            rt.wsAfter;\n            var rtNoWS = __rest(rt, [\"wsBefore\", \"wsAfter\"]);\n\n        rightToken = rtNoWS;\n      }\n    }\n\n    if (leftToken !== null && rightToken !== null) {\n      if ((leftOp === '<' || leftOp === '<=') && (rightOp === '<' || rightOp === '<=')) {\n        validRange = {\n          leftToken: leftToken,\n          leftOp: leftOp,\n          featureName: featureName,\n          rightOp: rightOp,\n          rightToken: rightToken\n        };\n      } else if ((leftOp === '>' || leftOp === '>=') && (rightOp === '>' || rightOp === '>=')) {\n        validRange = {\n          leftToken: leftToken,\n          leftOp: leftOp,\n          featureName: featureName,\n          rightOp: rightOp,\n          rightToken: rightToken\n        };\n      } else {\n        throw new Error('Invalid range');\n      }\n    } else if (leftToken === null && leftOp === null && rightOp !== null && rightToken !== null) {\n      validRange = {\n        leftToken: leftToken,\n        leftOp: leftOp,\n        featureName: featureName,\n        rightOp: rightOp,\n        rightToken: rightToken\n      };\n    } else if (leftToken !== null && leftOp !== null && rightOp === null && rightToken === null) {\n      validRange = {\n        leftToken: leftToken,\n        leftOp: leftOp,\n        featureName: featureName,\n        rightOp: rightOp,\n        rightToken: rightToken\n      };\n    }\n\n    return validRange;\n  } else {\n    throw new Error('Invalid range');\n  }\n};\n\n\n//# sourceMappingURL=media-query-parser.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/media-query-parser/dist/media-query-parser.esm.js\n");

/***/ })

};
;