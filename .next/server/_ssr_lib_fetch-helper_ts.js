"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_fetch-helper_ts";
exports.ids = ["_ssr_lib_fetch-helper_ts"];
exports.modules = {

/***/ "(ssr)/./lib/fetch-helper.ts":
/*!*****************************!*\
  !*** ./lib/fetch-helper.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeFetch: () => (/* binding */ safeFetch),\n/* harmony export */   safePostFormData: () => (/* binding */ safePostFormData),\n/* harmony export */   safePostJSON: () => (/* binding */ safePostJSON)\n/* harmony export */ });\n// Enhanced fetch helper with better error handling\nasync function safeFetch(url, options = {}) {\n    try {\n        const response = await fetch(url, options);\n        // Get response text first to handle HTML error pages\n        const responseText = await response.text();\n        // Check if the response is HTML (common error case)\n        if (responseText.trim().startsWith('<!DOCTYPE') || responseText.trim().startsWith('<html')) {\n            return {\n                success: false,\n                error: `Server returned HTML error page (status: ${response.status}). This usually means the API route crashed or the service is not running.`,\n                status: response.status\n            };\n        }\n        // Check if response is empty\n        if (!responseText.trim()) {\n            return {\n                success: false,\n                error: 'Empty response from server',\n                status: response.status\n            };\n        }\n        // Try to parse as JSON\n        let data;\n        try {\n            data = JSON.parse(responseText);\n        } catch (parseError) {\n            return {\n                success: false,\n                error: `Invalid JSON response from server: ${parseError instanceof Error ? parseError.message : 'Unknown parse error'}`,\n                status: response.status\n            };\n        }\n        if (!response.ok) {\n            return {\n                success: false,\n                error: data.error || `HTTP ${response.status}: ${response.statusText}`,\n                status: response.status,\n                data\n            };\n        }\n        return {\n            success: true,\n            data,\n            status: response.status\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Network error occurred',\n            status: 0\n        };\n    }\n}\n// Helper for POST requests with JSON body\nasync function safePostJSON(url, body) {\n    return safeFetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    });\n}\n// Helper for POST requests with FormData body\nasync function safePostFormData(url, formData) {\n    return safeFetch(url, {\n        method: 'POST',\n        body: formData\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9saWIvZmV0Y2gtaGVscGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQVNBLG1EQUFtRDtBQUM1QyxlQUFlQSxVQUFVQyxHQUFXLEVBQUVDLFVBQXVCLENBQUMsQ0FBQztJQUNwRSxJQUFJO1FBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNSCxLQUFLQztRQUVsQyxxREFBcUQ7UUFDckQsTUFBTUcsZUFBZSxNQUFNRixTQUFTRyxJQUFJO1FBRXhDLG9EQUFvRDtRQUNwRCxJQUFJRCxhQUFhRSxJQUFJLEdBQUdDLFVBQVUsQ0FBQyxnQkFBZ0JILGFBQWFFLElBQUksR0FBR0MsVUFBVSxDQUFDLFVBQVU7WUFDMUYsT0FBTztnQkFDTEMsU0FBUztnQkFDVEMsT0FBTyxDQUFDLHlDQUF5QyxFQUFFUCxTQUFTUSxNQUFNLENBQUMsMEVBQTBFLENBQUM7Z0JBQzlJQSxRQUFRUixTQUFTUSxNQUFNO1lBQ3pCO1FBQ0Y7UUFFQSw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDTixhQUFhRSxJQUFJLElBQUk7WUFDeEIsT0FBTztnQkFDTEUsU0FBUztnQkFDVEMsT0FBTztnQkFDUEMsUUFBUVIsU0FBU1EsTUFBTTtZQUN6QjtRQUNGO1FBRUEsdUJBQXVCO1FBQ3ZCLElBQUlDO1FBQ0osSUFBSTtZQUNGQSxPQUFPQyxLQUFLQyxLQUFLLENBQUNUO1FBQ3BCLEVBQUUsT0FBT1UsWUFBWTtZQUNuQixPQUFPO2dCQUNMTixTQUFTO2dCQUNUQyxPQUFPLENBQUMsbUNBQW1DLEVBQUVLLHNCQUFzQkMsUUFBUUQsV0FBV0UsT0FBTyxHQUFHLHVCQUF1QjtnQkFDdkhOLFFBQVFSLFNBQVNRLE1BQU07WUFDekI7UUFDRjtRQUVBLElBQUksQ0FBQ1IsU0FBU2UsRUFBRSxFQUFFO1lBQ2hCLE9BQU87Z0JBQ0xULFNBQVM7Z0JBQ1RDLE9BQU9FLEtBQUtGLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRVAsU0FBU1EsTUFBTSxDQUFDLEVBQUUsRUFBRVIsU0FBU2dCLFVBQVUsRUFBRTtnQkFDdEVSLFFBQVFSLFNBQVNRLE1BQU07Z0JBQ3ZCQztZQUNGO1FBQ0Y7UUFFQSxPQUFPO1lBQ0xILFNBQVM7WUFDVEc7WUFDQUQsUUFBUVIsU0FBU1EsTUFBTTtRQUN6QjtJQUVGLEVBQUUsT0FBT0QsT0FBTztRQUNkLE9BQU87WUFDTEQsU0FBUztZQUNUQyxPQUFPQSxpQkFBaUJNLFFBQVFOLE1BQU1PLE9BQU8sR0FBRztZQUNoRE4sUUFBUTtRQUNWO0lBQ0Y7QUFDRjtBQUVBLDBDQUEwQztBQUNuQyxlQUFlUyxhQUFhbkIsR0FBVyxFQUFFb0IsSUFBUztJQUN2RCxPQUFPckIsVUFBVUMsS0FBSztRQUNwQnFCLFFBQVE7UUFDUkMsU0FBUztZQUFFLGdCQUFnQjtRQUFtQjtRQUM5Q0YsTUFBTVIsS0FBS1csU0FBUyxDQUFDSDtJQUN2QjtBQUNGO0FBRUEsOENBQThDO0FBQ3ZDLGVBQWVJLGlCQUFpQnhCLEdBQVcsRUFBRXlCLFFBQWtCO0lBQ3BFLE9BQU8xQixVQUFVQyxLQUFLO1FBQ3BCcUIsUUFBUTtRQUNSRCxNQUFNSztJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxXaW5kb3dzXFxTeXN0ZW0zMlxcaGFja1xcREVWTWF0Y2gtSGFja2F0aG9uLTIwMjVcXGxpYlxcZmV0Y2gtaGVscGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTYWZlUmVzcG9uc2U8VCA9IGFueT4ge1xyXG4gIHN1Y2Nlc3M6IGJvb2xlYW5cclxuICBkYXRhPzogVFxyXG4gIGVycm9yPzogc3RyaW5nXHJcbiAgc3RhdHVzPzogbnVtYmVyXHJcbn1cclxuXHJcbi8vIEVuaGFuY2VkIGZldGNoIGhlbHBlciB3aXRoIGJldHRlciBlcnJvciBoYW5kbGluZ1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2FmZUZldGNoKHVybDogc3RyaW5nLCBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHt9KTogUHJvbWlzZTxTYWZlUmVzcG9uc2U+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpXHJcbiAgICBcclxuICAgIC8vIEdldCByZXNwb25zZSB0ZXh0IGZpcnN0IHRvIGhhbmRsZSBIVE1MIGVycm9yIHBhZ2VzXHJcbiAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KClcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHJlc3BvbnNlIGlzIEhUTUwgKGNvbW1vbiBlcnJvciBjYXNlKVxyXG4gICAgaWYgKHJlc3BvbnNlVGV4dC50cmltKCkuc3RhcnRzV2l0aCgnPCFET0NUWVBFJykgfHwgcmVzcG9uc2VUZXh0LnRyaW0oKS5zdGFydHNXaXRoKCc8aHRtbCcpKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGBTZXJ2ZXIgcmV0dXJuZWQgSFRNTCBlcnJvciBwYWdlIChzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfSkuIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgQVBJIHJvdXRlIGNyYXNoZWQgb3IgdGhlIHNlcnZpY2UgaXMgbm90IHJ1bm5pbmcuYCxcclxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIHJlc3BvbnNlIGlzIGVtcHR5XHJcbiAgICBpZiAoIXJlc3BvbnNlVGV4dC50cmltKCkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogJ0VtcHR5IHJlc3BvbnNlIGZyb20gc2VydmVyJyxcclxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFRyeSB0byBwYXJzZSBhcyBKU09OXHJcbiAgICBsZXQgZGF0YVxyXG4gICAgdHJ5IHtcclxuICAgICAgZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KVxyXG4gICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBgSW52YWxpZCBKU09OIHJlc3BvbnNlIGZyb20gc2VydmVyOiAke3BhcnNlRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IHBhcnNlRXJyb3IubWVzc2FnZSA6ICdVbmtub3duIHBhcnNlIGVycm9yJ31gLFxyXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBkYXRhLmVycm9yIHx8IGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWAsXHJcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXHJcbiAgICAgICAgZGF0YVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzXHJcbiAgICB9XHJcbiAgICBcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdOZXR3b3JrIGVycm9yIG9jY3VycmVkJyxcclxuICAgICAgc3RhdHVzOiAwXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBIZWxwZXIgZm9yIFBPU1QgcmVxdWVzdHMgd2l0aCBKU09OIGJvZHlcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVQb3N0SlNPTih1cmw6IHN0cmluZywgYm9keTogYW55KTogUHJvbWlzZTxTYWZlUmVzcG9uc2U+IHtcclxuICByZXR1cm4gc2FmZUZldGNoKHVybCwge1xyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgfSlcclxufVxyXG5cclxuLy8gSGVscGVyIGZvciBQT1NUIHJlcXVlc3RzIHdpdGggRm9ybURhdGEgYm9keVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2FmZVBvc3RGb3JtRGF0YSh1cmw6IHN0cmluZywgZm9ybURhdGE6IEZvcm1EYXRhKTogUHJvbWlzZTxTYWZlUmVzcG9uc2U+IHtcclxuICByZXR1cm4gc2FmZUZldGNoKHVybCwge1xyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBib2R5OiBmb3JtRGF0YVxyXG4gIH0pXHJcbn0gIl0sIm5hbWVzIjpbInNhZmVGZXRjaCIsInVybCIsIm9wdGlvbnMiLCJyZXNwb25zZSIsImZldGNoIiwicmVzcG9uc2VUZXh0IiwidGV4dCIsInRyaW0iLCJzdGFydHNXaXRoIiwic3VjY2VzcyIsImVycm9yIiwic3RhdHVzIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsInBhcnNlRXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJvayIsInN0YXR1c1RleHQiLCJzYWZlUG9zdEpTT04iLCJib2R5IiwibWV0aG9kIiwiaGVhZGVycyIsInN0cmluZ2lmeSIsInNhZmVQb3N0Rm9ybURhdGEiLCJmb3JtRGF0YSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./lib/fetch-helper.ts\n");

/***/ })

};
;