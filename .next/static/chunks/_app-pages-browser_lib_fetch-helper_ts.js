"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_fetch-helper_ts"],{

/***/ "(app-pages-browser)/./lib/fetch-helper.ts":
/*!*****************************!*\
  !*** ./lib/fetch-helper.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeFetch: () => (/* binding */ safeFetch),\n/* harmony export */   safePostFormData: () => (/* binding */ safePostFormData),\n/* harmony export */   safePostJSON: () => (/* binding */ safePostJSON)\n/* harmony export */ });\n// Enhanced fetch helper with better error handling\nasync function safeFetch(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    try {\n        const response = await fetch(url, options);\n        // Get response text first to handle HTML error pages\n        const responseText = await response.text();\n        // Check if the response is HTML (common error case)\n        if (responseText.trim().startsWith('<!DOCTYPE') || responseText.trim().startsWith('<html')) {\n            return {\n                success: false,\n                error: \"Server returned HTML error page (status: \".concat(response.status, \"). This usually means the API route crashed or the service is not running.\"),\n                status: response.status\n            };\n        }\n        // Check if response is empty\n        if (!responseText.trim()) {\n            return {\n                success: false,\n                error: 'Empty response from server',\n                status: response.status\n            };\n        }\n        // Try to parse as JSON\n        let data;\n        try {\n            data = JSON.parse(responseText);\n        } catch (parseError) {\n            return {\n                success: false,\n                error: \"Invalid JSON response from server: \".concat(parseError instanceof Error ? parseError.message : 'Unknown parse error'),\n                status: response.status\n            };\n        }\n        if (!response.ok) {\n            return {\n                success: false,\n                error: data.error || \"HTTP \".concat(response.status, \": \").concat(response.statusText),\n                status: response.status,\n                data\n            };\n        }\n        return {\n            success: true,\n            data,\n            status: response.status\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Network error occurred',\n            status: 0\n        };\n    }\n}\n// Helper for POST requests with JSON body\nasync function safePostJSON(url, body) {\n    return safeFetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    });\n}\n// Helper for POST requests with FormData body\nasync function safePostFormData(url, formData) {\n    return safeFetch(url, {\n        method: 'POST',\n        body: formData\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9mZXRjaC1oZWxwZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU0EsbURBQW1EO0FBQzVDLGVBQWVBLFVBQVVDLEdBQVc7UUFBRUMsVUFBQUEsaUVBQXVCLENBQUM7SUFDbkUsSUFBSTtRQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFBTUgsS0FBS0M7UUFFbEMscURBQXFEO1FBQ3JELE1BQU1HLGVBQWUsTUFBTUYsU0FBU0csSUFBSTtRQUV4QyxvREFBb0Q7UUFDcEQsSUFBSUQsYUFBYUUsSUFBSSxHQUFHQyxVQUFVLENBQUMsZ0JBQWdCSCxhQUFhRSxJQUFJLEdBQUdDLFVBQVUsQ0FBQyxVQUFVO1lBQzFGLE9BQU87Z0JBQ0xDLFNBQVM7Z0JBQ1RDLE9BQU8sNENBQTRELE9BQWhCUCxTQUFTUSxNQUFNLEVBQUM7Z0JBQ25FQSxRQUFRUixTQUFTUSxNQUFNO1lBQ3pCO1FBQ0Y7UUFFQSw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDTixhQUFhRSxJQUFJLElBQUk7WUFDeEIsT0FBTztnQkFDTEUsU0FBUztnQkFDVEMsT0FBTztnQkFDUEMsUUFBUVIsU0FBU1EsTUFBTTtZQUN6QjtRQUNGO1FBRUEsdUJBQXVCO1FBQ3ZCLElBQUlDO1FBQ0osSUFBSTtZQUNGQSxPQUFPQyxLQUFLQyxLQUFLLENBQUNUO1FBQ3BCLEVBQUUsT0FBT1UsWUFBWTtZQUNuQixPQUFPO2dCQUNMTixTQUFTO2dCQUNUQyxPQUFPLHNDQUErRyxPQUF6RUssc0JBQXNCQyxRQUFRRCxXQUFXRSxPQUFPLEdBQUc7Z0JBQ2hHTixRQUFRUixTQUFTUSxNQUFNO1lBQ3pCO1FBQ0Y7UUFFQSxJQUFJLENBQUNSLFNBQVNlLEVBQUUsRUFBRTtZQUNoQixPQUFPO2dCQUNMVCxTQUFTO2dCQUNUQyxPQUFPRSxLQUFLRixLQUFLLElBQUksUUFBNEJQLE9BQXBCQSxTQUFTUSxNQUFNLEVBQUMsTUFBd0IsT0FBcEJSLFNBQVNnQixVQUFVO2dCQUNwRVIsUUFBUVIsU0FBU1EsTUFBTTtnQkFDdkJDO1lBQ0Y7UUFDRjtRQUVBLE9BQU87WUFDTEgsU0FBUztZQUNURztZQUNBRCxRQUFRUixTQUFTUSxNQUFNO1FBQ3pCO0lBRUYsRUFBRSxPQUFPRCxPQUFPO1FBQ2QsT0FBTztZQUNMRCxTQUFTO1lBQ1RDLE9BQU9BLGlCQUFpQk0sUUFBUU4sTUFBTU8sT0FBTyxHQUFHO1lBQ2hETixRQUFRO1FBQ1Y7SUFDRjtBQUNGO0FBRUEsMENBQTBDO0FBQ25DLGVBQWVTLGFBQWFuQixHQUFXLEVBQUVvQixJQUFTO0lBQ3ZELE9BQU9yQixVQUFVQyxLQUFLO1FBQ3BCcUIsUUFBUTtRQUNSQyxTQUFTO1lBQUUsZ0JBQWdCO1FBQW1CO1FBQzlDRixNQUFNUixLQUFLVyxTQUFTLENBQUNIO0lBQ3ZCO0FBQ0Y7QUFFQSw4Q0FBOEM7QUFDdkMsZUFBZUksaUJBQWlCeEIsR0FBVyxFQUFFeUIsUUFBa0I7SUFDcEUsT0FBTzFCLFVBQVVDLEtBQUs7UUFDcEJxQixRQUFRO1FBQ1JELE1BQU1LO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFdpbmRvd3NcXFN5c3RlbTMyXFxoYWNrXFxERVZNYXRjaC1IYWNrYXRob24tMjAyNVxcbGliXFxmZXRjaC1oZWxwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNhZmVSZXNwb25zZTxUID0gYW55PiB7XHJcbiAgc3VjY2VzczogYm9vbGVhblxyXG4gIGRhdGE/OiBUXHJcbiAgZXJyb3I/OiBzdHJpbmdcclxuICBzdGF0dXM/OiBudW1iZXJcclxufVxyXG5cclxuLy8gRW5oYW5jZWQgZmV0Y2ggaGVscGVyIHdpdGggYmV0dGVyIGVycm9yIGhhbmRsaW5nXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYWZlRmV0Y2godXJsOiBzdHJpbmcsIG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge30pOiBQcm9taXNlPFNhZmVSZXNwb25zZT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucylcclxuICAgIFxyXG4gICAgLy8gR2V0IHJlc3BvbnNlIHRleHQgZmlyc3QgdG8gaGFuZGxlIEhUTUwgZXJyb3IgcGFnZXNcclxuICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKVxyXG4gICAgXHJcbiAgICAvLyBDaGVjayBpZiB0aGUgcmVzcG9uc2UgaXMgSFRNTCAoY29tbW9uIGVycm9yIGNhc2UpXHJcbiAgICBpZiAocmVzcG9uc2VUZXh0LnRyaW0oKS5zdGFydHNXaXRoKCc8IURPQ1RZUEUnKSB8fCByZXNwb25zZVRleHQudHJpbSgpLnN0YXJ0c1dpdGgoJzxodG1sJykpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogYFNlcnZlciByZXR1cm5lZCBIVE1MIGVycm9yIHBhZ2UgKHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9KS4gVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSBBUEkgcm91dGUgY3Jhc2hlZCBvciB0aGUgc2VydmljZSBpcyBub3QgcnVubmluZy5gLFxyXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgcmVzcG9uc2UgaXMgZW1wdHlcclxuICAgIGlmICghcmVzcG9uc2VUZXh0LnRyaW0oKSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiAnRW1wdHkgcmVzcG9uc2UgZnJvbSBzZXJ2ZXInLFxyXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gVHJ5IHRvIHBhcnNlIGFzIEpTT05cclxuICAgIGxldCBkYXRhXHJcbiAgICB0cnkge1xyXG4gICAgICBkYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpXHJcbiAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGBJbnZhbGlkIEpTT04gcmVzcG9uc2UgZnJvbSBzZXJ2ZXI6ICR7cGFyc2VFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gcGFyc2VFcnJvci5tZXNzYWdlIDogJ1Vua25vd24gcGFyc2UgZXJyb3InfWAsXHJcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGRhdGEuZXJyb3IgfHwgYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCxcclxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcclxuICAgICAgICBkYXRhXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgZGF0YSxcclxuICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNcclxuICAgIH1cclxuICAgIFxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ05ldHdvcmsgZXJyb3Igb2NjdXJyZWQnLFxyXG4gICAgICBzdGF0dXM6IDBcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIEhlbHBlciBmb3IgUE9TVCByZXF1ZXN0cyB3aXRoIEpTT04gYm9keVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2FmZVBvc3RKU09OKHVybDogc3RyaW5nLCBib2R5OiBhbnkpOiBQcm9taXNlPFNhZmVSZXNwb25zZT4ge1xyXG4gIHJldHVybiBzYWZlRmV0Y2godXJsLCB7XHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxyXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcclxuICB9KVxyXG59XHJcblxyXG4vLyBIZWxwZXIgZm9yIFBPU1QgcmVxdWVzdHMgd2l0aCBGb3JtRGF0YSBib2R5XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYWZlUG9zdEZvcm1EYXRhKHVybDogc3RyaW5nLCBmb3JtRGF0YTogRm9ybURhdGEpOiBQcm9taXNlPFNhZmVSZXNwb25zZT4ge1xyXG4gIHJldHVybiBzYWZlRmV0Y2godXJsLCB7XHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgIGJvZHk6IGZvcm1EYXRhXHJcbiAgfSlcclxufSAiXSwibmFtZXMiOlsic2FmZUZldGNoIiwidXJsIiwib3B0aW9ucyIsInJlc3BvbnNlIiwiZmV0Y2giLCJyZXNwb25zZVRleHQiLCJ0ZXh0IiwidHJpbSIsInN0YXJ0c1dpdGgiLCJzdWNjZXNzIiwiZXJyb3IiLCJzdGF0dXMiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwicGFyc2VFcnJvciIsIkVycm9yIiwibWVzc2FnZSIsIm9rIiwic3RhdHVzVGV4dCIsInNhZmVQb3N0SlNPTiIsImJvZHkiLCJtZXRob2QiLCJoZWFkZXJzIiwic3RyaW5naWZ5Iiwic2FmZVBvc3RGb3JtRGF0YSIsImZvcm1EYXRhIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/fetch-helper.ts\n"));

/***/ })

}]);